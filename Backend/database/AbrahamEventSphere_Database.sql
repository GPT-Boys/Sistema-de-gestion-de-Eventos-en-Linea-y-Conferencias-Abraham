

CREATE DATABASE IF NOT EXISTS AbrahamEventSphere_Database;

USE AbrahamEventSphere_Database;

-- tables
-- Table: ASISTENTE
CREATE TABLE ASISTENTE (
    ID_ASISTENTE int  NOT NULL AUTO_INCREMENT,
    ID_USUARIO int  NOT NULL,
    DESCRIPCION varchar(255)  NOT NULL,
    UNIQUE INDEX ASISTENTE (ID_USUARIO),
    CONSTRAINT ASISTENTE_pk PRIMARY KEY (ID_ASISTENTE)
);

-- Table: ASISTENTE_CONFERENCIA
CREATE TABLE ASISTENTE_CONFERENCIA (
    ID_ASISTENTE_CONFERENCIA int  NOT NULL AUTO_INCREMENT,
    ID_CONFERENCIA int  NOT NULL,
    ID_ASISTENTE int  NOT NULL,
    CONSTRAINT ASISTENTE_CONFERENCIA_pk PRIMARY KEY (ID_ASISTENTE_CONFERENCIA)
);

-- Table: ASISTENTE_CONFERENCIA_VOTACION
CREATE TABLE ASISTENTE_CONFERENCIA_VOTACION (
    ID_ASISTENTE_CONFERENCIA_VOTACION int  NOT NULL AUTO_INCREMENT,
    ID_ASISTENTE_CONFERENCIA int  NOT NULL,
    ID_VOTACION int  NOT NULL,
    CONSTRAINT ASISTENTE_CONFERENCIA_VOTACION_pk PRIMARY KEY (ID_ASISTENTE_CONFERENCIA_VOTACION)
);

-- Table: CIUDAD
CREATE TABLE CIUDAD (
    ID_CIUDAD int  NOT NULL AUTO_INCREMENT,
    CIUDAD varchar(50)  NOT NULL,
    CONSTRAINT CIUDAD_pk PRIMARY KEY (ID_CIUDAD)
);

INSERT INTO CIUDAD VALUES 
(1, "Pando"),
(2, "Beni"),
(3, "La Paz"),
(4, "Cochabamba"),
(5, "Santa Cruz de la Sierra"),
(6, "Oruro"),
(7, "Potosí"),
(8, "Chuquisaca"),
(9, "Tarija");

-- Table: CONFERENCIA
CREATE TABLE CONFERENCIA (
    ID_CONFERENCIA int  NOT NULL AUTO_INCREMENT,
    TITULO varchar(100)  NOT NULL,
    DESCRIPCION varchar(255)  NOT NULL,
    ID_MARCA_CONFERENCIA int  NOT NULL,
    ID_ORADOR int  NOT NULL,
    ID_TIPO_CONFERENCIA int  NOT NULL,
    VOTOS_A_FAVOR int  NOT NULL DEFAULT 0,
    VOTOS_EN_CONTRA int  NOT NULL DEFAULT 0,
    FECHA date  NOT NULL,
    HORA_EMPIEZA time  NOT NULL,
    HORA_TERMINA time  NOT NULL,
    SALA longtext  NOT NULL,
    EVALUACION longtext  NOT NULL,
    MATERIAL blob  NOT NULL,
    CONSTRAINT CONFERENCIA_pk PRIMARY KEY (ID_CONFERENCIA)
);

-- Table: CONFERENCIA_NOTIFICACION
CREATE TABLE CONFERENCIA_NOTIFICACION (
    ID_CONFERENCIA_NOTIFICACION int  NOT NULL AUTO_INCREMENT,
    ID_CONFERENCIA int  NOT NULL,
    NOTIFICACION longtext  NOT NULL,
    CONSTRAINT CONFERENCIA_NOTIFICACION_pk PRIMARY KEY (ID_CONFERENCIA_NOTIFICACION)
);

-- Table: MARCA_CONFERENCIA
CREATE TABLE MARCA_CONFERENCIA (
    ID_MARCA_CONFERENCIA int  NOT NULL AUTO_INCREMENT,
    MARCA_CONFERENCIA varchar(100)  NOT NULL,
    CONSTRAINT MARCA_CONFERENCIA_pk PRIMARY KEY (ID_MARCA_CONFERENCIA)
);
INSERT INTO MARCA_CONFERENCIA (ID_MARCA_CONFERENCIA, MARCA_CONFERENCIA) VALUES
(1, 'Serie Académica'),
(2, 'Serie Empresarial'),
(3, 'Serie Tecnológica');

-- Table: NOTIFICACION_ASISTENTE
CREATE TABLE NOTIFICACION_ASISTENTE (
    ID_NOTIFICACION_ASISTENTE int  NOT NULL AUTO_INCREMENT,
    ID_CONFERENCIA_NOTIFICACION int  NOT NULL,
    ID_ASISTENTE int  NOT NULL,
    CONSTRAINT NOTIFICACION_ASISTENTE_pk PRIMARY KEY (ID_NOTIFICACION_ASISTENTE)
);

-- Table: ORADOR
CREATE TABLE ORADOR (
    ID_ORADOR int  NOT NULL AUTO_INCREMENT,
    ID_USUARIO int  NOT NULL,
    DESCRIPCION varchar(255)  NOT NULL,
    EXPERIENCIA varchar(255)  NOT NULL,
    CONTACTO varchar(255)  NOT NULL,
    UNIQUE INDEX ORADOR (ID_USUARIO),
    CONSTRAINT ORADOR_pk PRIMARY KEY (ID_ORADOR)
);

-- Table: TIPO_CONFERENCIA
CREATE TABLE TIPO_CONFERENCIA (
    ID_TIPO_CONFERENCIA int  NOT NULL AUTO_INCREMENT,
    TIPO_CONFERENCIA varchar(100)  NOT NULL,
    CONSTRAINT TIPO_CONFERENCIA_pk PRIMARY KEY (ID_TIPO_CONFERENCIA)
);

INSERT INTO TIPO_CONFERENCIA (ID_TIPO_CONFERENCIA, TIPO_CONFERENCIA) VALUES
(1, 'Presencial'),
(2, 'Virtual'),
(3, 'Híbrida');

-- Table: TIPO_USUARIO
CREATE TABLE TIPO_USUARIO (
    ID_TIPO_USUARIO int  NOT NULL AUTO_INCREMENT,
    TIPO_USUARIO varchar(50)  NOT NULL,
    CONSTRAINT TIPO_USUARIO_pk PRIMARY KEY (ID_TIPO_USUARIO)
);

INSERT INTO TIPO_USUARIO VALUES
(1, "Administrador"),
(2, "Personal"),
(3, "Orador"),
(4, "Asistente");

-- Table: USUARIO
CREATE TABLE USUARIO (
    ID_USUARIO int  NOT NULL AUTO_INCREMENT,
    USUARIO varchar(100)  NOT NULL,
    CONTRASENIA varchar(100)  NOT NULL,
    ID_TIPO_USUARIO int  NOT NULL,
    NOMBRES varchar(100)  NOT NULL,
    APELLIDOS varchar(100)  NOT NULL,
    FECHA_NACIMIENTO date  NOT NULL,
    ID_CIUDAD int  NOT NULL,
    TELEFONO int  NOT NULL,
    CORREO_ELECTRONICO varchar(100)  NOT NULL,
    FECHA_CREACION timestamp  NOT NULL,
    UNIQUE INDEX USUARIO (USUARIO),
    UNIQUE INDEX CORREO_ELECTRONICO (CORREO_ELECTRONICO),
    CONSTRAINT USUARIO_pk PRIMARY KEY (ID_USUARIO)
);

-- Table: VOTACION
CREATE TABLE VOTACION (
    ID_VOTACION int  NOT NULL AUTO_INCREMENT,
    VOTACION boolean  NOT NULL,
    CONSTRAINT VOTACION_pk PRIMARY KEY (ID_VOTACION)
);

-- Stored Procedure para propagar notificaciones a asistentes registrados
DELIMITER //
CREATE PROCEDURE PropagarNotificacion(IN conf_id INT, IN notif_id INT)
BEGIN
  DECLARE asist_id INT;
  DECLARE done INT DEFAULT FALSE;
  DECLARE cur CURSOR FOR 
    SELECT ID_ASISTENTE FROM ASISTENTE_CONFERENCIA WHERE ID_CONFERENCIA = conf_id;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur;
  read_loop: LOOP
    FETCH cur INTO asist_id;
    IF done THEN
      LEAVE read_loop;
    END IF;
    INSERT INTO NOTIFICACION_ASISTENTE (ID_CONFERENCIA_NOTIFICACION, ID_ASISTENTE) 
    VALUES (notif_id, asist_id);
  END LOOP;
  CLOSE cur;
END //
DELIMITER ;

-- Trigger en CONFERENCIA para registrar notificación al actualizar
DELIMITER //
CREATE TRIGGER conference_update_trigger
AFTER UPDATE ON CONFERENCIA
FOR EACH ROW
BEGIN
  DECLARE new_notif_id INT;
  DECLARE changes TEXT DEFAULT '';

  -- Detectar cambios (personaliza según necesidades, e.g., si cambió fecha/hora/sala)
  IF OLD.FECHA <> NEW.FECHA THEN
    SET changes = CONCAT(changes, 'Fecha cambiada de ', OLD.FECHA, ' a ', NEW.FECHA, '. ');
  END IF;
  IF OLD.HORA_EMPIEZA <> NEW.HORA_EMPIEZA THEN
    SET changes = CONCAT(changes, 'Hora de inicio cambiada de ', OLD.HORA_EMPIEZA, ' a ', NEW.HORA_EMPIEZA, '. ');
  END IF;
  IF OLD.HORA_TERMINA <> NEW.HORA_TERMINA THEN
    SET changes = CONCAT(changes, 'Hora de fin cambiada de ', OLD.HORA_TERMINA, ' a ', NEW.HORA_TERMINA, '. ');
  END IF;
  IF OLD.SALA <> NEW.SALA THEN
    SET changes = CONCAT(changes, 'Sala cambiada de ', OLD.SALA, ' a ', NEW.SALA, '. ');
  END IF;

  IF changes <> '' THEN
    -- Insertar en CONFERENCIA_NOTIFICACION
    INSERT INTO CONFERENCIA_NOTIFICACION (ID_CONFERENCIA, NOTIFICACION) 
    VALUES (NEW.ID_CONFERENCIA, CONCAT('Conferencia "', NEW.TITULO, '" actualizada: ', changes));
    
    SET new_notif_id = LAST_INSERT_ID();
    
    -- Propagar a asistentes
    CALL PropagarNotificacion(NEW.ID_CONFERENCIA, new_notif_id);
  END IF;
END //
DELIMITER ;

UPDATE CONFERENCIA SET FECHA = '2025-09-10' WHERE ID_CONFERENCIA = 1;
SELECT * FROM CONFERENCIA_NOTIFICACION;
SELECT * FROM NOTIFICACION_ASISTENTE;

-- foreign keys
-- Reference: ASISTENTE_CONFERENCIA_ASISTENTE (table: ASISTENTE_CONFERENCIA)
ALTER TABLE ASISTENTE_CONFERENCIA ADD CONSTRAINT ASISTENTE_CONFERENCIA_ASISTENTE FOREIGN KEY ASISTENTE_CONFERENCIA_ASISTENTE (ID_ASISTENTE)
    REFERENCES ASISTENTE (ID_ASISTENTE);

-- Reference: ASISTENTE_CONFERENCIA_CONFERENCIA (table: ASISTENTE_CONFERENCIA)
ALTER TABLE ASISTENTE_CONFERENCIA ADD CONSTRAINT ASISTENTE_CONFERENCIA_CONFERENCIA FOREIGN KEY ASISTENTE_CONFERENCIA_CONFERENCIA (ID_CONFERENCIA)
    REFERENCES CONFERENCIA (ID_CONFERENCIA);

-- Reference: ASISTENTE_CONFERENCIA_VOTO_ASISTENTE_CONFERENCIA (table: ASISTENTE_CONFERENCIA_VOTACION)
ALTER TABLE ASISTENTE_CONFERENCIA_VOTACION ADD CONSTRAINT ASISTENTE_CONFERENCIA_VOTO_ASISTENTE_CONFERENCIA FOREIGN KEY ASISTENTE_CONFERENCIA_VOTO_ASISTENTE_CONFERENCIA (ID_ASISTENTE_CONFERENCIA)
    REFERENCES ASISTENTE_CONFERENCIA (ID_ASISTENTE_CONFERENCIA);

-- Reference: ASISTENTE_CONFERENCIA_VOTO_VOTACION (table: ASISTENTE_CONFERENCIA_VOTACION)
ALTER TABLE ASISTENTE_CONFERENCIA_VOTACION ADD CONSTRAINT ASISTENTE_CONFERENCIA_VOTO_VOTACION FOREIGN KEY ASISTENTE_CONFERENCIA_VOTO_VOTACION (ID_VOTACION)
    REFERENCES VOTACION (ID_VOTACION);

-- Reference: ASISTENTE_USUARIO (table: ASISTENTE)
ALTER TABLE ASISTENTE ADD CONSTRAINT ASISTENTE_USUARIO FOREIGN KEY ASISTENTE_USUARIO (ID_USUARIO)
    REFERENCES USUARIO (ID_USUARIO);

-- Reference: CONFERENCIA_MARCA_CONFERENCIA (table: CONFERENCIA)
ALTER TABLE CONFERENCIA ADD CONSTRAINT CONFERENCIA_MARCA_CONFERENCIA FOREIGN KEY CONFERENCIA_MARCA_CONFERENCIA (ID_MARCA_CONFERENCIA)
    REFERENCES MARCA_CONFERENCIA (ID_MARCA_CONFERENCIA);

-- Reference: CONFERENCIA_NOTIFICACION_CONFERENCIA (table: CONFERENCIA_NOTIFICACION)
ALTER TABLE CONFERENCIA_NOTIFICACION ADD CONSTRAINT CONFERENCIA_NOTIFICACION_CONFERENCIA FOREIGN KEY CONFERENCIA_NOTIFICACION_CONFERENCIA (ID_CONFERENCIA)
    REFERENCES CONFERENCIA (ID_CONFERENCIA);

-- Reference: CONFERENCIA_ORADOR (table: CONFERENCIA)
ALTER TABLE CONFERENCIA ADD CONSTRAINT CONFERENCIA_ORADOR FOREIGN KEY CONFERENCIA_ORADOR (ID_ORADOR)
    REFERENCES ORADOR (ID_ORADOR);

-- Reference: CONFERENCIA_TIPO_CONFERENCIA (table: CONFERENCIA)
ALTER TABLE CONFERENCIA ADD CONSTRAINT CONFERENCIA_TIPO_CONFERENCIA FOREIGN KEY CONFERENCIA_TIPO_CONFERENCIA (ID_TIPO_CONFERENCIA)
    REFERENCES TIPO_CONFERENCIA (ID_TIPO_CONFERENCIA);

-- Reference: NOTIFICACION_ASISTENTE_ASISTENTE (table: NOTIFICACION_ASISTENTE)
ALTER TABLE NOTIFICACION_ASISTENTE ADD CONSTRAINT NOTIFICACION_ASISTENTE_ASISTENTE FOREIGN KEY NOTIFICACION_ASISTENTE_ASISTENTE (ID_ASISTENTE)
    REFERENCES ASISTENTE (ID_ASISTENTE);

-- Reference: NOTIFICACION_ASISTENTE_CONFERENCIA_NOTIFICACION (table: NOTIFICACION_ASISTENTE)
ALTER TABLE NOTIFICACION_ASISTENTE ADD CONSTRAINT NOTIFICACION_ASISTENTE_CONFERENCIA_NOTIFICACION FOREIGN KEY NOTIFICACION_ASISTENTE_CONFERENCIA_NOTIFICACION (ID_CONFERENCIA_NOTIFICACION)
    REFERENCES CONFERENCIA_NOTIFICACION (ID_CONFERENCIA_NOTIFICACION);

-- Reference: ORADOR_USUARIO (table: ORADOR)
ALTER TABLE ORADOR ADD CONSTRAINT ORADOR_USUARIO FOREIGN KEY ORADOR_USUARIO (ID_USUARIO)
    REFERENCES USUARIO (ID_USUARIO);

-- Reference: USUARIO_CIUDAD (table: USUARIO)
ALTER TABLE USUARIO ADD CONSTRAINT USUARIO_CIUDAD FOREIGN KEY USUARIO_CIUDAD (ID_CIUDAD)
    REFERENCES CIUDAD (ID_CIUDAD);

-- Reference: USUARIO_ROL_USUARIO (table: USUARIO)
ALTER TABLE USUARIO ADD CONSTRAINT USUARIO_ROL_USUARIO FOREIGN KEY USUARIO_ROL_USUARIO (ID_TIPO_USUARIO)
    REFERENCES TIPO_USUARIO (ID_TIPO_USUARIO);

-- End of file.

